{"structs":["struct LightInfo {\n    bool IsEnabled;\n    lowp int LightType; \/\/ 0:none 1:directional 2:point 3:spot\n    mediump vec4 LightPosition;  \/\/ in eys space\n    lowp vec3 LightDirection; \/\/ in eye space\n    mediump vec3 LightColor;\n    mediump float Attenuation;\n    mediump float SpotConsCutoff;\n    mediump float SpotExponent;\n};"],"variables":[{"precision":"mediump","name":"SpecularColor","type":5,"usage":1},{"precision":"mediump","name":"AmbientColor","type":5,"usage":1},{"precision":"mediump","name":"ShininessExponent","type":3,"usage":1},{"precision":"lowp","name":"LightDirection","type":5,"usage":3},{"precision":"lowp","name":"EyeDirectionOut","type":5,"usage":3},{"precision":"lowp","name":"Attenuation","type":3,"usage":3},{"precision":"lowp","name":"Normal","type":5,"usage":3}],"function":{"functionContent":"{\n    lowp vec3 reflectDir = normalize(-reflect(LightDirection, normal));\n    float diffuse = max(0.0, dot(normal, LightDirection));\n    float specular = max(0.0, dot(reflectDir, EyeDirectionOut));\n    specular = (diffuse == 0.0 || ShininessExponent == 0.0) ? 0.0 : pow(specular, ShininessExponent);\n    vec3 scatteredLight [3] = AmbientColor * Attenuation + MainLight.LightColor * diffuse * Attenuation;\n    vec3 reflectedLight = SpecularColor * specular * Attenuation;\n    \n#link CEFrag_ApplyShadowEffect(scatteredLight, reflectedLight);\n    \n    inputColor = min(inputColor * scatteredLight + reflectedLight, vec4(1.0));\n}","paramNames":["inputColor"],"linkFunctionDict":{"CEFrag_ApplyShadowEffect_vec3x3_vec3":{"paramNames":["scatteredLight","reflectedLight"],"functionID":"CEFrag_ApplyShadowEffect_vec3x3_vec3","linkRange":"{476, 63}"}},"functionID":"CEFrag_ApplyBaseLightEffect_vec4","paramLocations":[["{549, 10}","{566, 10}"]]}}